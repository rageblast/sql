SELECT id FROM customers WHERE last_name = 'George';
SELECT * FROM orders WHERE custom_id = 1;

// or

SELECT * FROM orders WHERE customer_id = (SELECT id FROM customers WHERE last_name = 'George');

// Cross Joins -> Joins everything
SELECT * FROM customers, orders;

// Inner Joins -> Comman in Both Table

-- Our first inner join!
SELECT * FROM customers
JOIN orders ON orders.customer_id = customers.id;
 
SELECT first_name, last_name, order_date, amount FROM customers
JOIN orders ON orders.customer_id = customers.id;
 
-- The order doesn't matter here:
SELECT * FROM orders
JOIN customers ON customers.id = orders.customer_id;

// We can say Inner JOIN or Join
// If u use Group By use Aggregate Functions

// Group By Inner Joins:

SELECT first_name, last_name, SUM(amount) AS total FROM customers
JOIN orders ON orders.customer_id = customers.id
GROUP BY first_name , last_name
ORDER BY total;

// Left Join -> Helps us to retrieve matching one and as well as 
the non-matching one information from left table 
//Order of table is important

SELECT first_name, last_name, order_date, amount
FROM customers LEFT JOIN orders ON orders.customer_id = customers.id;
 
// Order of table is Important -> this works like inner join 
SELECT order_date, amount, first_name, last_name
FROM orders LEFT JOIN customers ON orders.customer_id = customers.id;

// Group By 
SELECT first_name, last_name, 
    IFNULL(SUM(amount), 0) AS money_spent
FROM customers
    LEFT JOIN orders ON customers.id = orders.customer_id
    GROUP BY first_name , last_name;

// Right Join -> Viceversa of Left Join 
SELECT first_name, last_name, order_date, amount
FROM customers
    RIGHT JOIN orders ON customers.id = orders.customer_id;    